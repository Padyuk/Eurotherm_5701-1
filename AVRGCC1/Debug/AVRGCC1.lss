
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000090  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005d  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000093  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
int main(void)
{
unsigned char A=0x00;
//unsigned char B=0;
PORTC=0x00;
  80:	18 b8       	out	0x08, r1	; 8
 DDRC=0x01;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	87 b9       	out	0x07, r24	; 7
// DDRE=0x00;
// PORTE=0x01;
 DDRD=0x00;
  86:	1a b8       	out	0x0a, r1	; 10
 PORTD=0x06;
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	8b b9       	out	0x0b, r24	; 11
	A=PIND;
    A=A&0x06;
	A=A|0x01;


	PORTC=0x01;  //16
  8c:	91 e0       	ldi	r25, 0x01	; 1
 DDRD=0x00;
 PORTD=0x06;
 while(1)
 {

	A=PIND;
  8e:	89 b1       	in	r24, 0x09	; 9
    A=A&0x06;
  90:	86 70       	andi	r24, 0x06	; 6
	A=A|0x01;
  92:	81 60       	ori	r24, 0x01	; 1


	PORTC=0x01;  //16
  94:	98 b9       	out	0x08, r25	; 8
	...
	asm("nop");
	asm("nop");
	asm("nop");


    if(A==0x01)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	09 f4       	brne	.+2      	; 0xa4 <main+0x24>
	{PORTC=0x00;}
  a2:	18 b8       	out	0x08, r1	; 8
 	asm("nop");
  a4:	00 00       	nop
	asm("nop");   //33
  a6:	00 00       	nop
	asm("nop");
  a8:	00 00       	nop


    if(A==0x03)
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	09 f4       	brne	.+2      	; 0xb0 <main+0x30>
	{PORTC=0x00;}
  ae:	18 b8       	out	0x08, r1	; 8
	...
	asm("nop");   //50
	asm("nop");



    if(A==0x05)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	09 f4       	brne	.+2      	; 0xbe <main+0x3e>
	{PORTC=0x00;}
  bc:	18 b8       	out	0x08, r1	; 8
 	asm("nop");
  be:	00 00       	nop
 	asm("nop");   //66
  c0:	00 00       	nop
 	asm("nop");
  c2:	00 00       	nop


    if(A==0x07)
  c4:	87 30       	cpi	r24, 0x07	; 7
  c6:	09 f4       	brne	.+2      	; 0xca <main+0x4a>
	{PORTC=0x00;}
  c8:	18 b8       	out	0x08, r1	; 8
	...

//    B=PINB;
//    B=B&0x01;


 }
  da:	d9 cf       	rjmp	.-78     	; 0x8e <main+0xe>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
